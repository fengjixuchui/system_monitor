import { CheckBox, StandardListView, StyleMetrics , VerticalBox, HorizontalBox, LineEdit, Switch, StandardButton, Button, Palette } from "std-widgets.slint";
import { EventsEnables, EnablesData, EventDesc } from "events_enable.slint";
import { EventsView, EventsViewData,StackWalkInfo } from "events_view.slint";
import { FilterInput } from "filter_input.slint";

export { EventsEnables, EnablesData, EventDesc, EventsViewData, StackWalkInfo }

export component App inherits Window {
    in property <{width: physical_length, height: physical_length}> preferred-size;

    preferred-width: preferred-size.width;
    preferred-height: preferred-size.height;
    title: @tr("kernel events trace");
    icon: @image-url("./logo/slint-logo-small-light.png");
    default-font-family: "Noto Sans";

    callback start() -> {ok: bool, message: string};
    callback stop();
    callback set_filter_expression_for_one(string) -> {result: bool, message: string};
    callback set_filter_expression_for_pair(string) -> {result: bool, message: string};

    out property <length> rem: self.default-font-size;
    private property <{ok: bool, message: string}> result_start;

    switch_popup := PopupWindow {
        x: start-stop.x;
        y: start-stop.y + start-stop.height;
        width: 200px;
        height: 100px;

        Rectangle {
            background: root.background;
            border-color: popup_text.color;
            border-width: 1px;
        }
        dialog := Dialog {
            height:100%; width: 100%;

            popup_text := Text {
                text: root.result-start.message;
                wrap: word-wrap;
            }
            StandardButton { kind: ok; }
        }
    }

    VerticalBox{
        start-stop := HorizontalBox {
            spacing: 1cm;
            Switch {
                text: @tr("On/Off");
                checked: false;
                toggled => {
                    if (self.checked) {
                        root.result-start = start();
                        if (!root.result-start.ok) {
                            switch_popup.show();
                            self.checked = false;
                        }
                    } else {
                        stop()
                    }
                }
            }
            HorizontalBox {
                spacing: 2mm;
                padding: 0px;
                height: 7mm;

                FilterInput {
                    placeholder-text: @tr("filter one: process_id = 4");
                    set_filter_expression(text) => {
                        set_filter_expression_for_one(text)
                    }
                }
                Text {
                    vertical-alignment: center;
                    text: "&&";
                    color: Palette.accent-background;
                }
                FilterInput {
                    placeholder-text: @tr("filter pair: handle || custom(handle, CreateHandle, CloseHandle, process_id, properties.xx");
                    set_filter_expression(text) => {
                        set_filter_expression_for_pair(text)
                    }
                }
            }
        }
        main := HorizontalBox {
            event-enables := EventsEnables{}
            line := Rectangle {
                background: gray; width: 2px;

                TouchArea {
                    x: -(parent.width / 2);
                    width: parent.width * 2;
                    mouse-cursor: ew-resize;
                    moved => {
                        event-enables.width = event-enables.width + self.mouse-x;
                        line.x = line.x + self.mouse-x;
                        events-view.x = events-view.x + self.mouse-x;
                    }
                }
            }
            events-view := EventsView{}
        }
    }
}