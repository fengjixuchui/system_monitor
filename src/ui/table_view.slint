// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-1.1 OR LicenseRef-Slint-commercial

import { Icons } from "styling.slint";
import { ListView, ScrollView, Palette, HorizontalBox } from "std-widgets.slint";

component TableViewColumn inherits Rectangle {
    background: Palette.background;

    in property <string> text;
    in property <int> index_column;
    in property <SortOrder> sort-order: SortOrder.unsorted;

    callback clicked <=> i-touch-area.clicked;
    callback adjust_size(length);

    states [
        pressed when i-touch-area.pressed : {
            background: Palette.control-background;
        }
        hover when i-touch-area.has-hover : {
            background: Palette.control-background;
        }
    ]

    i-touch-area := TouchArea {
        width: parent.width - 11px;
    }

    HorizontalLayout {
        padding-left: 12px;
        padding-right: 12px;
        spacing: 2px;

        Text {
            width: 100%;
            height: 100%;
            vertical-alignment: center;
            text: text;
            font-weight: 600;
            font-size: 1.5rem;
            color: Palette.foreground;
            overflow: elide;
        }

        i-icon := Image {
            image-fit: contain;
            colorize: Palette.foreground;
            visible: root.sort-order != SortOrder.unsorted;
            width: 12px;
            y: (parent.height - self.height) / 2;
            source: root.sort-order == SortOrder.ascending ? Icons.arrow-down : Icons.arrow-up;

            animate colorize { duration: 150ms; }
        }
    }

    // border
    Rectangle {
        y: parent.height - self.height;
        width: 100%;
        height: 1px;
        background: Palette.foreground.darker(0.5);
    }

    Rectangle {
        x: parent.width - 1px;
        width: 1px;

        states [
            hover when i-movable-touch-area.has-hover : {
                background: Palette.control-background;
            }
        ]

        animate background { duration: 150ms; }

        i-movable-touch-area := TouchArea {
            width: 10px;
            mouse-cursor: ew-resize;

            moved => {
                if (self.pressed) {
                    adjust_size(self.mouse-x - self.pressed-x);
                }
            }
        }
    }
}

component TableViewCell inherits Rectangle {
    in property <string> text;
    in property <int> index_row;
    in property <int> index_column;
    in property <TextHorizontalAlignment> horizontal-alignment;
    out property <bool> has-hover: i-touch-area.has-hover;
    out property <bool> pressed: i-touch-area.pressed;
    private property <string> info;

    callback clicked;
    callback double-clicked;
    callback pointer-event(/* event */ PointerEvent, /* absolute mouse position */ Point);
    callback text-pretty(/* row-index */int, /* column-index */ int) -> string;

    states [
        hover when i-touch-area.has-hover: {
            root.background: Palette.control-background;
        }
    ]

    popup := PopupWindow {
        x: 12px;
        y: parent.height + 12px;

        ScrollView {
            x: 0;
            y: 0;
            width: rect.preferred-width + 12px;
            height: rect.preferred-height + 12px;

            rect := Rectangle {
                background: Palette.background;
                border-color: Palette.border;
                border-width: 1phx;

                HorizontalLayout {
                    padding-left: 12px;
                    padding-right: 12px;
                    padding-top: 9px;
                    padding-bottom: 9px;

                    Text {
                        min-width: max(self.font-size * 8, min(self.preferred-width, self.max-width));
                        max-width: self.font-size * 50;
                        min-height: max(self.font-size * 3, self.preferred-height);
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        wrap: word-wrap;
                        text: info;
                        font-weight: 500;
                        font-size: 1.2rem;
                    }
                }
            }
        }
    }

    i-touch-area := TouchArea {
        clicked => {
            clicked();
            root.info = root.text-pretty(index-row, index-column);
            popup.show();
        }
        double-clicked => {
            root.double-clicked()
        }
        pointer-event(pe) => {
            root.pointer-event(pe, {
                x: self.absolute-position.x + self.mouse-x,
                y: self.absolute-position.y + self.mouse-y,
            });
        }
    }

    HorizontalLayout {
        padding-left: 12px;
        padding-right: 12px;
        padding-top: 9px;
        padding-bottom: 9px;

        Text {
            width: 100%;
            height: 100%;
            overflow: elide;
            horizontal-alignment: horizontal-alignment;
            vertical-alignment: center;
            text: text;
            font-weight: 500;
            font-size: 1rem;
            color: mod(index_row, 2) == 0 ? Palette.foreground : Palette.alternate-foreground;
        }
    }
}

component TableViewRow inherits Rectangle {
    in property <bool> selected;
    in property <bool> even;
    in property <bool> has-hover;
    in property <bool> pressed;

    min-width: i-layout.min-width;
    min-height: max(34px, i-layout.min-height);
    border-radius: 4px;
    background: root.even ? Palette.background : Palette.alternate-background;

    public function double-clicked() {
        debug("double-clicked");
        popup.show();
    }

    states [
        pressed when root.pressed : {
            root.background: Palette.control-background;
        }
        hover when root.has-hover : {
            root.border-color: Palette.accent-background;
            root.border-width: 1px;
            i-selector.height: root.selected ? 16px : 0;
        }
        selected when root.selected : {
            root.border-color: Palette.selection-background;
            root.border-width: 1px;
            i-selector.height: 16px;
        }
    ]

    popup := PopupWindow {
        x: 12px;
        y: parent.height + 12px;

        ScrollView {
            x: 0;
            y: 0;
            width: rect.preferred-width + 12px;
            height: rect.preferred-height + 12px;

            rect := Rectangle {
                background: Palette.background;
                border-color: Palette.border;
                border-width: 1phx;
                
                HorizontalBox {
                    padding-left: 12px;
                    padding-right: 12px;
                    padding-top: 9px;
                    padding-bottom: 9px;

                    Text {
                        min-width: max(self.font-size * 8, min(self.preferred-width, self.max-width));
                        max-width: self.font-size * 50;
                        min-height: max(self.font-size * 3, self.preferred-height);
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        wrap: word-wrap;
                        text: "hello world!";
                        font-weight: 500;
                        font-size: 1rem;
                    }
                }
            }
        }
    }

    i-layout := HorizontalLayout {
        @children
    }

    i-selector := Rectangle {
        x: 0px;
        y: (parent.height - self.height) / 2;
        width: 4px;
        height: 0px;
        background: Palette.accent-background;
        border-radius: 2px;

        animate height { duration: 150ms; easing: ease-out; }
    }
}

export component TableView {
    in property <[[StandardListViewItem]]> rows;
    out property <int> current-sort-column: -1;
    in-out property <[TableColumn]> columns;
    in-out property <int> current-row: -1;
    in-out property <length> order-column-width: 6rem;
    in property <bool> has_order_number: true;

    callback sort-ascending(/* column-index */ int);
    callback sort-descending(/* column-index */ int);
    callback row-pointer-event(/* row-index */ int, /* event */ PointerEvent,  /* absolute mouse position */ Point);
    callback current-row-changed(/* current-row */ int);
    callback cell-data-pretty(/* row-index */int, /* column-index */ int) -> string;

    private property <length> min-header-height: 42px;
    private property <length> item-height: i-scroll-view.viewport-height / rows.length;
    private property <length> current-item-y: i-scroll-view.viewport-y + current-row * item-height;
    private property <int> has-hover-row: -1;

    public function set-current-row(index: int) {
        if (index < 0 || index >= rows.length) {
            return;
        }

        current-row = index;
        current-row-changed(current-row);

        if (current-item-y < 0) {
            i-scroll-view.viewport-y += 0 - current-item-y;
        }

        if (current-item-y + item-height > i-scroll-view.visible-height) {
            i-scroll-view.viewport-y -= current-item-y + item-height - i-scroll-view.visible-height;
        }
    }

    function sort(index: int) {
        if (root.current-sort-column != index) {
            root.columns[root.current-sort-column].sort-order = SortOrder.unsorted;
        }

        if(root.columns[index].sort-order == SortOrder.ascending) {
            root.columns[index].sort-order = SortOrder.descending;
            root.sort-descending(index);
        } else {
            root.columns[index].sort-order = SortOrder.ascending;
            root.sort-ascending(index);
        }

        root.current-sort-column = index;
    }

    min-width: 400px;
    min-height: 200px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    forward-focus: i-focus-scope;

    VerticalLayout {
        Rectangle {
            vertical-stretch: 0;
            min-height: i-header-layout.min-height;

            i-header-layout := HorizontalLayout {
                x: i-scroll-view.viewport-x;
                padding-right: 6px;
                min-height: root.min-header-height;

                private property <length> min_column_width: 2rem;

                if has-order-number : TableViewColumn {
                    width: root.order-column-width;
                    text: @tr("åºå·");
                    index-column: 0;

                    adjust_size(diff) => {
                        root.order-column-width = max(min_column_width, self.width + diff);
                    }
                }
                for column[index] in root.columns : TableViewColumn {
                    sort-order: column.sort-order;
                    horizontal-stretch: column.horizontal-stretch;
                    width: index < root.columns.length - 1 ? root.columns[index].width : parent.width;
                    text: column.title;
                    index-column: index;

                    clicked => {
                        root.sort(index);
                    }

                    adjust_size(diff) => {
                        column.width = max(min_column_width, self.width + diff);
                    }
                }
            }
        }

        i-scroll-view := ListView {
            for row[idx] in root.rows : row_element := TableViewRow {
                selected: idx == root.current-row;
                has-hover: idx == has-hover-row;
                even: mod(idx, 2) == 0;

                // order number
                if has-order-number : TableViewCell {
                    width: root.order-column-width;
                    text: idx;
                    index-row: idx;
                    index-column: 0;
                    horizontal-alignment: center;

                    pointer-event(pe, pos) => {
                        root.row-pointer-event(idx, pe, {
                            x: pos.x - root.absolute-position.x,
                            y: pos.y - root.absolute-position.y,
                        });
                        if pe.kind == PointerEventKind.move {
                            root.has-hover-row = idx;
                        }
                    }
    
                    clicked => {
                        root.focus();
                        root.set-current-row(idx);
                    }

                    double-clicked => {
                        row_element.double-clicked();
                    }
                }
                for cell[index] in row : TableViewCell {
                    horizontal-stretch: root.columns[index].horizontal-stretch;
                    width: index < root.columns.length - 1 ? root.columns[index].width : parent.width;
                    text: cell.text;
                    index-row: idx;
                    index-column: index;
                    horizontal-alignment: left;

                    pointer-event(pe, pos) => {
                        root.row-pointer-event(idx, pe, {
                            x: pos.x - root.absolute-position.x,
                            y: pos.y - root.absolute-position.y,
                        });
                        if pe.kind == PointerEventKind.move {
                            root.has-hover-row = idx;
                        }
                    }
    
                    clicked => {
                        root.focus();
                        root.set-current-row(idx);
                    }

                    double-clicked => {
                        row_element.double-clicked();
                    }

                    text-pretty(index_row, index_column) => {
                        root.cell-data-pretty(index_row, index_column)
                    }
                }
            }
        }
    }

    i-focus-scope := FocusScope {
        x: 0;
        width: 0; // Do not react on clicks

        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                root.set-current-row(root.current-row - 1);
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.set-current-row(root.current-row + 1);
                return accept;
            }
            reject
        }
    }
}